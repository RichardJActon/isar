% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ProtocolComponent.R
\name{ProtocolComponent}
\alias{ProtocolComponent}
\title{An R6 object for \code{[ProtocolComponent]}s
A component used in a protocol.}
\description{
An R6 object for \code{[ProtocolComponent]}s
A component used in a protocol.

An R6 object for \code{[ProtocolComponent]}s
A component used in a protocol.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{name}}{A component name.}

\item{\code{component_type}}{The classifier as a term for the component.}

\item{\code{comments}}{Comments associated with instances of this class.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ProtocolComponent-new}{\code{ProtocolComponent$new()}}
\item \href{#method-ProtocolComponent-check_name}{\code{ProtocolComponent$check_name()}}
\item \href{#method-ProtocolComponent-set_name}{\code{ProtocolComponent$set_name()}}
\item \href{#method-ProtocolComponent-check_component_type}{\code{ProtocolComponent$check_component_type()}}
\item \href{#method-ProtocolComponent-set_component_type}{\code{ProtocolComponent$set_component_type()}}
\item \href{#method-ProtocolComponent-check_comments}{\code{ProtocolComponent$check_comments()}}
\item \href{#method-ProtocolComponent-set_comments}{\code{ProtocolComponent$set_comments()}}
\item \href{#method-ProtocolComponent-to_list}{\code{ProtocolComponent$to_list()}}
\item \href{#method-ProtocolComponent-from_list}{\code{ProtocolComponent$from_list()}}
\item \href{#method-ProtocolComponent-get_id}{\code{ProtocolComponent$get_id()}}
\item \href{#method-ProtocolComponent-set_id}{\code{ProtocolComponent$set_id()}}
\item \href{#method-ProtocolComponent-clone}{\code{ProtocolComponent$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProtocolComponent-new"></a>}}
\if{latex}{\out{\hypertarget{method-ProtocolComponent-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProtocolComponent$new(
  name = character(),
  component_type = NULL,
  comments = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{A component name.}

\item{\code{component_type}}{The classifier as a term for the component.}

\item{\code{comments}}{Comments associated with instances of this class.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a new ProtocolComponent
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProtocolComponent-check_name"></a>}}
\if{latex}{\out{\hypertarget{method-ProtocolComponent-check_name}{}}}
\subsection{Method \code{check_name()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProtocolComponent$check_name(name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{the name of the protocol}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Check that name is a single string
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProtocolComponent-set_name"></a>}}
\if{latex}{\out{\hypertarget{method-ProtocolComponent-set_name}{}}}
\subsection{Method \code{set_name()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProtocolComponent$set_name(name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{the name of the protocol}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Set name if it passes validation
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProtocolComponent-check_component_type"></a>}}
\if{latex}{\out{\hypertarget{method-ProtocolComponent-check_component_type}{}}}
\subsection{Method \code{check_component_type()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProtocolComponent$check_component_type(component_type)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{component_type}}{an \code{[OntologyAnnotation]} object}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Check that component_type is an \code{[OntologyAnnotation]} object
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProtocolComponent-set_component_type"></a>}}
\if{latex}{\out{\hypertarget{method-ProtocolComponent-set_component_type}{}}}
\subsection{Method \code{set_component_type()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProtocolComponent$set_component_type(component_type)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{component_type}}{an \code{[OntologyAnnotation]} object}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Set component_type if input is valid
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProtocolComponent-check_comments"></a>}}
\if{latex}{\out{\hypertarget{method-ProtocolComponent-check_comments}{}}}
\subsection{Method \code{check_comments()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProtocolComponent$check_comments(comments)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{comments}}{comments}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
checks if comments are a named list of character vectors
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProtocolComponent-set_comments"></a>}}
\if{latex}{\out{\hypertarget{method-ProtocolComponent-set_comments}{}}}
\subsection{Method \code{set_comments()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProtocolComponent$set_comments(comments)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{comments}}{a list of comments}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Sets comments if they are in a valid format
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProtocolComponent-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-ProtocolComponent-to_list}{}}}
\subsection{Method \code{to_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProtocolComponent$to_list(ld = FALSE, recursive = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ld}}{linked data (default FALSE)}

\item{\code{recursive}}{use the \code{from_list()} method on list items that are also isar objects (default = TRUE)}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
An R list representation of a \code{[ProtocolComponent]} object
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProtocolComponent-from_list"></a>}}
\if{latex}{\out{\hypertarget{method-ProtocolComponent-from_list}{}}}
\subsection{Method \code{from_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProtocolComponent$from_list(lst, recursive = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{lst}}{an Characteristic object serialized to a list}

\item{\code{recursive}}{use the \code{from_list()} method on list items that are also isar objects (default = TRUE)}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Make \code{[Characteristic]} object from list
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProtocolComponent-get_id"></a>}}
\if{latex}{\out{\hypertarget{method-ProtocolComponent-get_id}{}}}
\subsection{Method \code{get_id()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProtocolComponent$get_id()}\if{html}{\out{</div>}}
}

\subsection{Details}{
Get the uuid of this object
}

\subsection{Returns}{
a uuid
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProtocolComponent-set_id"></a>}}
\if{latex}{\out{\hypertarget{method-ProtocolComponent-set_id}{}}}
\subsection{Method \code{set_id()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProtocolComponent$set_id(id = uuid::UUIDgenerate(), suffix = character())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{a uuid}

\item{\code{suffix}}{a human readable suffix}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
set the uuid of this object
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProtocolComponent-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ProtocolComponent-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProtocolComponent$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
