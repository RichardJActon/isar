% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ProtocolParameter.R
\name{ProtocolParameter}
\alias{ProtocolParameter}
\title{A parameter used by a protocol.}
\description{
A parameter used by a protocol.

A parameter used by a protocol.
}
\examples{

## ------------------------------------------------
## Method `ProtocolParameter$to_list`
## ------------------------------------------------

Person$new()
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{parameter_name}}{A parameter name as an ontology term}

\item{\code{ontology_source_references}}{an \link{OntologySourceReferences} object}

\item{\code{comments}}{Comments associated with instances of this class.}

\item{\code{@id}}{identifier}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ProtocolParameter-new}{\code{ProtocolParameter$new()}}
\item \href{#method-ProtocolParameter-check_parameter_name}{\code{ProtocolParameter$check_parameter_name()}}
\item \href{#method-ProtocolParameter-set_parameter_name}{\code{ProtocolParameter$set_parameter_name()}}
\item \href{#method-ProtocolParameter-check_comments}{\code{ProtocolParameter$check_comments()}}
\item \href{#method-ProtocolParameter-set_comments}{\code{ProtocolParameter$set_comments()}}
\item \href{#method-ProtocolParameter-add_comment}{\code{ProtocolParameter$add_comment()}}
\item \href{#method-ProtocolParameter-to_list}{\code{ProtocolParameter$to_list()}}
\item \href{#method-ProtocolParameter-from_list}{\code{ProtocolParameter$from_list()}}
\item \href{#method-ProtocolParameter-print}{\code{ProtocolParameter$print()}}
\item \href{#method-ProtocolParameter-clone}{\code{ProtocolParameter$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProtocolParameter-new"></a>}}
\if{latex}{\out{\hypertarget{method-ProtocolParameter-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProtocolParameter$new(
  parameter_name = NULL,
  ontology_source_references = NULL,
  comments = NULL,
  `@id` = character()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{parameter_name}}{A parameter name as an ontology term}

\item{\code{ontology_source_references}}{an \link{OntologySourceReferences} object}

\item{\code{comments}}{Comments associated with instances of this class.}

\item{\code{@id}}{identifier}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a new \link{ProtocolParameter} object
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProtocolParameter-check_parameter_name"></a>}}
\if{latex}{\out{\hypertarget{method-ProtocolParameter-check_parameter_name}{}}}
\subsection{Method \code{check_parameter_name()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProtocolParameter$check_parameter_name(parameter_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{parameter_name}}{an \link{OntologyAnnotation} object}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Check that parameter_name is an \link{OntologyAnnotation} object
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProtocolParameter-set_parameter_name"></a>}}
\if{latex}{\out{\hypertarget{method-ProtocolParameter-set_parameter_name}{}}}
\subsection{Method \code{set_parameter_name()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProtocolParameter$set_parameter_name(parameter_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{parameter_name}}{an \link{OntologyAnnotation} object}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Set parameter_name if input is valid
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProtocolParameter-check_comments"></a>}}
\if{latex}{\out{\hypertarget{method-ProtocolParameter-check_comments}{}}}
\subsection{Method \code{check_comments()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProtocolParameter$check_comments(comments)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{comments}}{comments}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
checks if comments are a named list of character vectors
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProtocolParameter-set_comments"></a>}}
\if{latex}{\out{\hypertarget{method-ProtocolParameter-set_comments}{}}}
\subsection{Method \code{set_comments()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProtocolParameter$set_comments(comments)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{comments}}{a list of comments}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Sets comments if they are in a valid format
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProtocolParameter-add_comment"></a>}}
\if{latex}{\out{\hypertarget{method-ProtocolParameter-add_comment}{}}}
\subsection{Method \code{add_comment()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProtocolParameter$add_comment(comment)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{comment}}{a list of comments}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Add comment if it is in a valid format
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProtocolParameter-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-ProtocolParameter-to_list}{}}}
\subsection{Method \code{to_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProtocolParameter$to_list(ld = FALSE, recursive = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ld}}{logical json-ld}

\item{\code{recursive}}{use the \code{from_list()} method on list items that are also isar objects (default = TRUE)}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
generate an R list representation translatable to JSON
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{Person$new()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProtocolParameter-from_list"></a>}}
\if{latex}{\out{\hypertarget{method-ProtocolParameter-from_list}{}}}
\subsection{Method \code{from_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProtocolParameter$from_list(lst, recursive = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{lst}}{an \link{OntologyAnnotation} object serialized to a list}

\item{\code{recursive}}{use the \code{from_list()} method on list items that are also isar objects (default = TRUE)}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Make \link{OntologyAnnotation} from list
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProtocolParameter-print"></a>}}
\if{latex}{\out{\hypertarget{method-ProtocolParameter-print}{}}}
\subsection{Method \code{print()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProtocolParameter$print()}\if{html}{\out{</div>}}
}

\subsection{Details}{
Pretty Prints \link{ProtocolParameter} objects
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProtocolParameter-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ProtocolParameter-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProtocolParameter$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
